/*
 * motor.c
 *
 *  Created on: Apr 29, 2024
 *      Author: natha
 */

#include "motor.h"

void set_duty(motor_t* p_mot, int32_t level) {
	// Constrain level to valid range
	if (level > 100) level = 100;
    if (level < -100) level = -100;
	// Initialize pulse width variables
    uint32_t pulse1 = 0;
    uint32_t pulse2 = 0;
    if(level > 0 ){
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
    }
    else if(level < 0){
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
    }
    // Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
    *(p_mot->chB) = pulse2;

}
void enable_chA(motor_t* p_mot, int32_t level){
	uint32_t pulse = (uint32_t)((level * p_mot->Period) / 100);
	*(p_mot->chA) = pulse;
}
void enable_chB(motor_t* p_mot, int32_t level){
	uint32_t pulse = (uint32_t)((level * p_mot->Period) / 100);
	*(p_mot->chB) = pulse;
}
void disable_chA(motor_t* p_mot){
	*(p_mot->chA) = 0;
}
void disable_chB(motor_t* p_mot){
	*(p_mot->chB) = 0;
}
void set_duty_chA(motor_t* p_mot, int32_t level){
	uint32_t pulse = (uint32_t)((level * p_mot->Period) / 100);
	*(p_mot->chA) = pulse;
}
void set_duty_chB(motor_t* p_mot, int32_t level){
	uint32_t pulse = (uint32_t)((level * p_mot->Period) / 100);
	*(p_mot->chB) = pulse;
}
