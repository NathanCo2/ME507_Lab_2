
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005038  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080053a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000006c  08005414  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005414  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bb5  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bc  00000000  00000000  00017c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  0001af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026206  00000000  00000000  0001bba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012700  00000000  00000000  00041da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeb8b  00000000  00000000  000544a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  00143078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00147358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051a8 	.word	0x080051a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080051a8 	.word	0x080051a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b091      	sub	sp, #68	@ 0x44
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbfe 	bl	8000cce <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8cd 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9cf 	bl	8000878 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004da:	f000 f91b 	bl	8000714 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f99b 	bl	8000818 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Timer 4 Ch1&2
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e2:	2100      	movs	r1, #0
 80004e4:	4858      	ldr	r0, [pc, #352]	@ (8000648 <main+0x180>)
 80004e6:	f002 fb19 	bl	8002b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ea:	2104      	movs	r1, #4
 80004ec:	4856      	ldr	r0, [pc, #344]	@ (8000648 <main+0x180>)
 80004ee:	f002 fb15 	bl	8002b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004f2:	2108      	movs	r1, #8
 80004f4:	4854      	ldr	r0, [pc, #336]	@ (8000648 <main+0x180>)
 80004f6:	f002 fb11 	bl	8002b1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004fa:	210c      	movs	r1, #12
 80004fc:	4852      	ldr	r0, [pc, #328]	@ (8000648 <main+0x180>)
 80004fe:	f002 fb0d 	bl	8002b1c <HAL_TIM_PWM_Start>
  volatile uint32_t *pCCR1 = &(htim2.Instance->CCR1);
 8000502:	4b51      	ldr	r3, [pc, #324]	@ (8000648 <main+0x180>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3334      	adds	r3, #52	@ 0x34
 8000508:	63bb      	str	r3, [r7, #56]	@ 0x38
  volatile uint32_t *pCCR2 = &(htim2.Instance->CCR2);
 800050a:	4b4f      	ldr	r3, [pc, #316]	@ (8000648 <main+0x180>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3338      	adds	r3, #56	@ 0x38
 8000510:	637b      	str	r3, [r7, #52]	@ 0x34
  volatile uint32_t *pCCR3 = &(htim2.Instance->CCR3);
 8000512:	4b4d      	ldr	r3, [pc, #308]	@ (8000648 <main+0x180>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	333c      	adds	r3, #60	@ 0x3c
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  volatile uint32_t *pCCR4 = &(htim2.Instance->CCR4);
 800051a:	4b4b      	ldr	r3, [pc, #300]	@ (8000648 <main+0x180>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3340      	adds	r3, #64	@ 0x40
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t Tim2Period = (htim2.Instance->ARR); // grabs timer 2 period from hardware register
 8000522:	4b49      	ldr	r3, [pc, #292]	@ (8000648 <main+0x180>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000528:	62bb      	str	r3, [r7, #40]	@ 0x28

  motor_t motor1 = {pCCR1, pCCR2, Tim2Period, duty}; // passes in pointers to both CCR registers to control motor and period value
 800052a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000534:	623b      	str	r3, [r7, #32]
 8000536:	4b45      	ldr	r3, [pc, #276]	@ (800064c <main+0x184>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
  motor_t motor2 = {pCCR3, pCCR4, Tim2Period, duty}; // passes in pointers to both CCR registers to control motor and period value
 800053c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	4b40      	ldr	r3, [pc, #256]	@ (800064c <main+0x184>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	617b      	str	r3, [r7, #20]

  HAL_UART_Receive_IT(&huart2, &RxBuffer[RxIndex], 1);  // Start receiving one byte
 800054e:	4b40      	ldr	r3, [pc, #256]	@ (8000650 <main+0x188>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4b3f      	ldr	r3, [pc, #252]	@ (8000654 <main+0x18c>)
 8000556:	4413      	add	r3, r2
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	483e      	ldr	r0, [pc, #248]	@ (8000658 <main+0x190>)
 800055e:	f003 f9c1 	bl	80038e4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)reset, strlen(reset));
 8000562:	4b3e      	ldr	r3, [pc, #248]	@ (800065c <main+0x194>)
 8000564:	681c      	ldr	r4, [r3, #0]
 8000566:	4b3d      	ldr	r3, [pc, #244]	@ (800065c <main+0x194>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fe2c 	bl	80001c8 <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	b29b      	uxth	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	4621      	mov	r1, r4
 8000578:	4837      	ldr	r0, [pc, #220]	@ (8000658 <main+0x190>)
 800057a:	f003 f955 	bl	8003828 <HAL_UART_Transmit_IT>
  while (1)
  {
	  if (CmdReceived) {
 800057e:	4b38      	ldr	r3, [pc, #224]	@ (8000660 <main+0x198>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0fa      	beq.n	800057e <main+0xb6>
		  if(RxBuffer[0] == 'M') { // motor command confirmed
 8000588:	4b32      	ldr	r3, [pc, #200]	@ (8000654 <main+0x18c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b4d      	cmp	r3, #77	@ 0x4d
 800058e:	d152      	bne.n	8000636 <main+0x16e>
			  char xy[3];
			  xy[0] = RxBuffer[2];
 8000590:	4b30      	ldr	r3, [pc, #192]	@ (8000654 <main+0x18c>)
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	713b      	strb	r3, [r7, #4]
			  xy[1] = RxBuffer[3];
 8000596:	4b2f      	ldr	r3, [pc, #188]	@ (8000654 <main+0x18c>)
 8000598:	78db      	ldrb	r3, [r3, #3]
 800059a:	717b      	strb	r3, [r7, #5]
			  xy[2] = '\0';  // Null-terminate the string for strtol to know when to end
 800059c:	2300      	movs	r3, #0
 800059e:	71bb      	strb	r3, [r7, #6]
			  int duty = (int) strtol(xy, NULL, 16);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2210      	movs	r2, #16
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fdc2 	bl	8005130 <strtol>
 80005ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
			  // Check if the value represents a negative number in two's complement
			  if (duty > 127) {
 80005ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80005b2:	dd0f      	ble.n	80005d4 <main+0x10c>
		        duty -= 256;  // Adjust to negative 8-bit integer
 80005b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005b6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		      duty = duty*100/127;
 80005bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005be:	2264      	movs	r2, #100	@ 0x64
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <main+0x19c>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	441a      	add	r2, r3
 80005cc:	1192      	asrs	r2, r2, #6
 80005ce:	17db      	asrs	r3, r3, #31
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		      }
			  if(RxBuffer[1] == '1') { //if we are talking motor 1
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <main+0x18c>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	2b31      	cmp	r3, #49	@ 0x31
 80005da:	d114      	bne.n	8000606 <main+0x13e>
				  set_duty(&motor1, duty);
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f9be 	bl	8000964 <set_duty>
				  HAL_UART_Transmit_IT(&huart2, (uint8_t*)confirm1, strlen(confirm1));
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <main+0x1a0>)
 80005ea:	681c      	ldr	r4, [r3, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <main+0x1a0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fde9 	bl	80001c8 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	4621      	mov	r1, r4
 80005fe:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x190>)
 8000600:	f003 f912 	bl	8003828 <HAL_UART_Transmit_IT>
 8000604:	e017      	b.n	8000636 <main+0x16e>
				  }
			  else if(RxBuffer[1] == '2') { //if we are talking motor 2
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <main+0x18c>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	2b32      	cmp	r3, #50	@ 0x32
 800060c:	d113      	bne.n	8000636 <main+0x16e>
				  set_duty(&motor2, duty);
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f9a5 	bl	8000964 <set_duty>
				  HAL_UART_Transmit_IT(&huart2, (uint8_t*)confirm2, strlen(confirm2));
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <main+0x1a4>)
 800061c:	681c      	ldr	r4, [r3, #0]
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <main+0x1a4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fdd0 	bl	80001c8 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	4621      	mov	r1, r4
 8000630:	4809      	ldr	r0, [pc, #36]	@ (8000658 <main+0x190>)
 8000632:	f003 f8f9 	bl	8003828 <HAL_UART_Transmit_IT>
			  }
		  }
		  CmdReceived = 0; // Reset flag
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <main+0x198>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
		  memset(RxBuffer, 0, 5);  // Clear buffer
 800063c:	2205      	movs	r2, #5
 800063e:	2100      	movs	r1, #0
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <main+0x18c>)
 8000642:	f004 fd7f 	bl	8005144 <memset>
	  if (CmdReceived) {
 8000646:	e79a      	b.n	800057e <main+0xb6>
 8000648:	20000088 	.word	0x20000088
 800064c:	20000000 	.word	0x20000000
 8000650:	20000161 	.word	0x20000161
 8000654:	2000015c 	.word	0x2000015c
 8000658:	200000d4 	.word	0x200000d4
 800065c:	2000000c 	.word	0x2000000c
 8000660:	20000162 	.word	0x20000162
 8000664:	81020409 	.word	0x81020409
 8000668:	20000004 	.word	0x20000004
 800066c:	20000008 	.word	0x20000008

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	@ 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	@ 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fd60 	bl	8005144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000692:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000696:	f000 fed7 	bl	8001448 <HAL_PWREx_ControlVoltageScaling>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a0:	f000 f95a 	bl	8000958 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a4:	2310      	movs	r3, #16
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	@ 0x60
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c0:	2328      	movs	r3, #40	@ 0x28
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ff0d 	bl	80014f4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006e0:	f000 f93a 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	2104      	movs	r1, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fad5 	bl	8001cac <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000708:	f000 f926 	bl	8000958 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	@ 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <MX_TIM2_Init+0x100>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b33      	ldr	r3, [pc, #204]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 800074c:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <MX_TIM2_Init+0x100>)
 800074e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <MX_TIM2_Init+0x100>)
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000760:	482c      	ldr	r0, [pc, #176]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000762:	f002 f983 	bl	8002a6c <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 f8f4 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4825      	ldr	r0, [pc, #148]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000780:	f002 ff7c 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800078a:	f000 f8e5 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	@ 0x60
 8000790:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	481b      	ldr	r0, [pc, #108]	@ (8000814 <MX_TIM2_Init+0x100>)
 80007a6:	f002 fabf 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007b0:	f000 f8d2 	bl	8000958 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 80007b4:	f247 532f 	movw	r3, #29999	@ 0x752f
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2204      	movs	r2, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_TIM2_Init+0x100>)
 80007c2:	f002 fab1 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80007cc:	f000 f8c4 	bl	8000958 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2208      	movs	r2, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_TIM2_Init+0x100>)
 80007dc:	f002 faa4 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007e6:	f000 f8b7 	bl	8000958 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 80007ea:	f247 532f 	movw	r3, #29999	@ 0x752f
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	220c      	movs	r2, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_TIM2_Init+0x100>)
 80007f8:	f002 fa96 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000802:	f000 f8a9 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <MX_TIM2_Init+0x100>)
 8000808:	f000 f934 	bl	8000a74 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000088 	.word	0x20000088

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_USART2_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART2_UART_Init+0x58>)
 800085c:	f002 ff96 	bl	800378c <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f877 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000d4 	.word	0x200000d4
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (CmdReceived == 0) {
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <HAL_UART_RxCpltCallback+0x70>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d120      	bne.n	800092c <HAL_UART_RxCpltCallback+0x54>
		data = RxBuffer[RxIndex];
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <HAL_UART_RxCpltCallback+0x78>)
 80008f2:	5c9a      	ldrb	r2, [r3, r2]
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_UART_RxCpltCallback+0x7c>)
 80008f6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(huart, &data, 1); // Echo back
 80008f8:	2201      	movs	r2, #1
 80008fa:	4916      	ldr	r1, [pc, #88]	@ (8000954 <HAL_UART_RxCpltCallback+0x7c>)
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f002 ff93 	bl	8003828 <HAL_UART_Transmit_IT>
		// Check if command has been completed
		if (data == '\r' && RxIndex == 4) {
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_UART_RxCpltCallback+0x7c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b0d      	cmp	r3, #13
 8000908:	d10a      	bne.n	8000920 <HAL_UART_RxCpltCallback+0x48>
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b04      	cmp	r3, #4
 8000910:	d106      	bne.n	8000920 <HAL_UART_RxCpltCallback+0x48>
			CmdReceived = 1; // Set flag to process in main loop once buffer is full
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_UART_RxCpltCallback+0x70>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			RxIndex = 0;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e005      	b.n	800092c <HAL_UART_RxCpltCallback+0x54>
		}
		else{
			RxIndex++;
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 800092a:	701a      	strb	r2, [r3, #0]
		}

	}
	HAL_UART_Receive_IT(huart, (int32_t *)&RxBuffer[RxIndex], 1); //prep next interrupt
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <HAL_UART_RxCpltCallback+0x74>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <HAL_UART_RxCpltCallback+0x78>)
 8000934:	4413      	add	r3, r2
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f002 ffd2 	bl	80038e4 <HAL_UART_Receive_IT>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000162 	.word	0x20000162
 800094c:	20000161 	.word	0x20000161
 8000950:	2000015c 	.word	0x2000015c
 8000954:	20000163 	.word	0x20000163

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <set_duty>:
 *      Author: natha
 */

#include "motor.h"

void set_duty(motor_t* p_mot, int32_t level) {
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	// Constrain level to valid range
	if (level > 100) level = 100;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b64      	cmp	r3, #100	@ 0x64
 8000972:	dd01      	ble.n	8000978 <set_duty+0x14>
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800097e:	da02      	bge.n	8000986 <set_duty+0x22>
 8000980:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000984:	603b      	str	r3, [r7, #0]
	// Initialize pulse width variables
    uint32_t pulse1 = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dd0c      	ble.n	80009ae <set_duty+0x4a>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	4a13      	ldr	r2, [pc, #76]	@ (80009ec <set_duty+0x88>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1152      	asrs	r2, r2, #5
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e00f      	b.n	80009ce <set_duty+0x6a>
    }
    else if(level < 0){
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da0c      	bge.n	80009ce <set_duty+0x6a>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	425b      	negs	r3, r3
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6892      	ldr	r2, [r2, #8]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <set_duty+0x88>)
 80009c2:	fb82 1203 	smull	r1, r2, r2, r3
 80009c6:	1152      	asrs	r2, r2, #5
 80009c8:	17db      	asrs	r3, r3, #31
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	60fb      	str	r3, [r7, #12]
    }
    // Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	601a      	str	r2, [r3, #0]

}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	51eb851f 	.word	0x51eb851f

080009f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a48:	d10b      	bne.n	8000a62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d139      	bne.n	8000b0a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a18      	ldr	r2, [pc, #96]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_TIM_MspPostInit+0xa0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000ac6:	2322      	movs	r3, #34	@ 0x22
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f000 faf8 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ae8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <HAL_TIM_MspPostInit+0xa4>)
 8000b06:	f000 fae7 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2288      	movs	r2, #136	@ 0x88
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fb01 	bl	8005144 <memset>
  if(huart->Instance==USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a25      	ldr	r2, [pc, #148]	@ (8000bdc <HAL_UART_MspInit+0xc0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d143      	bne.n	8000bd4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 facb 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff fef8 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	4a16      	ldr	r2, [pc, #88]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f000 fa8a 	bl	80010d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2026      	movs	r0, #38	@ 0x26
 8000bca:	f000 f9d0 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bce:	2026      	movs	r0, #38	@ 0x26
 8000bd0:	f000 f9e9 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	37b0      	adds	r7, #176	@ 0xb0
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f89d 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USART2_IRQHandler+0x10>)
 8000c4a:	f002 fe97 	bl	800397c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000d4 	.word	0x200000d4

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f004 fa59 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fc0b 	bl	80004c8 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc0:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000cc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc8:	200002a0 	.word	0x200002a0

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>

08000cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f93d 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff fe7e 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_InitTick+0x70>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f949 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f913 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_InitTick+0x74>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000018 	.word	0x20000018
 8000d70:	20000010 	.word	0x20000010
 8000d74:	20000014 	.word	0x20000014

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	20000164 	.word	0x20000164

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000164 	.word	0x20000164

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	@ (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e022      	b.n	800104a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	f003 021c 	and.w	r2, r3, #28
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d005      	beq.n	800107a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2204      	movs	r2, #4
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e029      	b.n	80010ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f003 021c 	and.w	r2, r3, #28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
    }
  }
  return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e17f      	b.n	80013e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8171 	beq.w	80013e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b03      	cmp	r3, #3
 8001184:	d118      	bne.n	80011b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80ac 	beq.w	80013e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b5f      	ldr	r3, [pc, #380]	@ (8001408 <HAL_GPIO_Init+0x330>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	4a5e      	ldr	r2, [pc, #376]	@ (8001408 <HAL_GPIO_Init+0x330>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	@ 0x60
 8001296:	4b5c      	ldr	r3, [pc, #368]	@ (8001408 <HAL_GPIO_Init+0x330>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a2:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <HAL_GPIO_Init+0x334>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x242>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001410 <HAL_GPIO_Init+0x338>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x23e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001414 <HAL_GPIO_Init+0x33c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x23a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001418 <HAL_GPIO_Init+0x340>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x236>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	@ (800141c <HAL_GPIO_Init+0x344>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x232>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001420 <HAL_GPIO_Init+0x348>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <HAL_GPIO_Init+0x34c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x22a>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001302:	2307      	movs	r3, #7
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x244>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x244>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x244>
 800131a:	2300      	movs	r3, #0
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132c:	4937      	ldr	r1, [pc, #220]	@ (800140c <HAL_GPIO_Init+0x334>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133a:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <HAL_GPIO_Init+0x350>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	@ (8001428 <HAL_GPIO_Init+0x350>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001364:	4b30      	ldr	r3, [pc, #192]	@ (8001428 <HAL_GPIO_Init+0x350>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	@ (8001428 <HAL_GPIO_Init+0x350>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <HAL_GPIO_Init+0x350>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_GPIO_Init+0x350>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_GPIO_Init+0x350>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <HAL_GPIO_Init+0x350>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f47f ae78 	bne.w	80010e8 <HAL_GPIO_Init+0x10>
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48001000 	.word	0x48001000
 8001420:	48001400 	.word	0x48001400
 8001424:	48001800 	.word	0x48001800
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <HAL_PWREx_GetVoltageRange+0x18>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001456:	d130      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001464:	d038      	beq.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800146e:	4a1e      	ldr	r2, [pc, #120]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001470:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2232      	movs	r2, #50	@ 0x32
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148c:	e002      	b.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3b01      	subs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a0:	d102      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f2      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b4:	d110      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e00f      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c6:	d007      	beq.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d0:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000
 80014ec:	20000010 	.word	0x20000010
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e3ca      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001506:	4b97      	ldr	r3, [pc, #604]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001510:	4b94      	ldr	r3, [pc, #592]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80e4 	beq.w	80016f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_RCC_OscConfig+0x4a>
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	f040 808b 	bne.w	800164c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 8087 	bne.w	800164c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	4b89      	ldr	r3, [pc, #548]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x62>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e3a2      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1a      	ldr	r2, [r3, #32]
 800155a:	4b82      	ldr	r3, [pc, #520]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_RCC_OscConfig+0x7c>
 8001566:	4b7f      	ldr	r3, [pc, #508]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800156e:	e005      	b.n	800157c <HAL_RCC_OscConfig+0x88>
 8001570:	4b7c      	ldr	r3, [pc, #496]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800157c:	4293      	cmp	r3, r2
 800157e:	d223      	bcs.n	80015c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fd55 	bl	8002034 <RCC_SetFlashLatencyFromMSIRange>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e383      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b73      	ldr	r3, [pc, #460]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a72      	ldr	r2, [pc, #456]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b70      	ldr	r3, [pc, #448]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	496d      	ldr	r1, [pc, #436]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4968      	ldr	r1, [pc, #416]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
 80015c6:	e025      	b.n	8001614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a65      	ldr	r2, [pc, #404]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4960      	ldr	r1, [pc, #384]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	495b      	ldr	r1, [pc, #364]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd15 	bl	8002034 <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e343      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001614:	f000 fc4a 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	4950      	ldr	r1, [pc, #320]	@ (8001768 <HAL_RCC_OscConfig+0x274>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_RCC_OscConfig+0x278>)
 8001632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001634:	4b4e      	ldr	r3, [pc, #312]	@ (8001770 <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb61 	bl	8000d00 <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d052      	beq.n	80016ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	e327      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d032      	beq.n	80016ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001654:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a42      	ldr	r2, [pc, #264]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb9e 	bl	8000da0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001668:	f7ff fb9a 	bl	8000da0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e310      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a36      	ldr	r2, [pc, #216]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4931      	ldr	r1, [pc, #196]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	492c      	ldr	r1, [pc, #176]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e01a      	b.n	80016f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a29      	ldr	r2, [pc, #164]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb6b 	bl	8000da0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb67 	bl	8000da0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e2dd      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e0:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x1da>
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d074      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x21a>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d10e      	bne.n	8001726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d064      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d160      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e2ba      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x24a>
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e026      	b.n	800178c <HAL_RCC_OscConfig+0x298>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001746:	d115      	bne.n	8001774 <HAL_RCC_OscConfig+0x280>
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a02      	ldr	r2, [pc, #8]	@ (8001764 <HAL_RCC_OscConfig+0x270>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x298>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	0800524c 	.word	0x0800524c
 800176c:	20000010 	.word	0x20000010
 8001770:	20000014 	.word	0x20000014
 8001774:	4ba0      	ldr	r3, [pc, #640]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a9f      	ldr	r2, [pc, #636]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b9d      	ldr	r3, [pc, #628]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a9c      	ldr	r2, [pc, #624]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb04 	bl	8000da0 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb00 	bl	8000da0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	@ 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e276      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	4b92      	ldr	r3, [pc, #584]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x2a8>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff faf0 	bl	8000da0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff faec 	bl	8000da0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e262      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d6:	4b88      	ldr	r3, [pc, #544]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2d0>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d060      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x310>
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d116      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x328>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e23f      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b76      	ldr	r3, [pc, #472]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	4973      	ldr	r1, [pc, #460]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	e040      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d023      	beq.n	8001882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183a:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff faab 	bl	8000da0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff faa7 	bl	8000da0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e21d      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b65      	ldr	r3, [pc, #404]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b62      	ldr	r3, [pc, #392]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	495f      	ldr	r1, [pc, #380]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e018      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fa87 	bl	8000da0 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fa83 	bl	8000da0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1f9      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c8:	4b4b      	ldr	r3, [pc, #300]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	4a4a      	ldr	r2, [pc, #296]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa62 	bl	8000da0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa5e 	bl	8000da0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1d4      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x3ec>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001908:	4a3b      	ldr	r2, [pc, #236]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fa45 	bl	8000da0 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff fa41 	bl	8000da0 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1b7      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192c:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800194c:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10d      	bne.n	8001974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001970:	2301      	movs	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d118      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198c:	f7ff fa08 	bl	8000da0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7ff fa04 	bl	8000da0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e17a      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_RCC_OscConfig+0x508>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x4d8>
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ca:	e029      	b.n	8001a20 <HAL_RCC_OscConfig+0x52c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d115      	bne.n	8001a00 <HAL_RCC_OscConfig+0x50c>
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	4a03      	ldr	r2, [pc, #12]	@ (80019f8 <HAL_RCC_OscConfig+0x504>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x52c>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
 8001a00:	4b9c      	ldr	r3, [pc, #624]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	4a9b      	ldr	r2, [pc, #620]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a10:	4b98      	ldr	r3, [pc, #608]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a97      	ldr	r2, [pc, #604]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d016      	beq.n	8001a56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f9ba 	bl	8000da0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff f9b6 	bl	8000da0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e12a      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	4b8b      	ldr	r3, [pc, #556]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ed      	beq.n	8001a30 <HAL_RCC_OscConfig+0x53c>
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff f9a3 	bl	8000da0 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff f99f 	bl	8000da0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e113      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a74:	4b7f      	ldr	r3, [pc, #508]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ed      	bne.n	8001a5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b7a      	ldr	r3, [pc, #488]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	4a79      	ldr	r2, [pc, #484]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80fe 	beq.w	8001c9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	f040 80d0 	bne.w	8001c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aa8:	4b72      	ldr	r3, [pc, #456]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d130      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d127      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d11f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ae8:	2a07      	cmp	r2, #7
 8001aea:	bf14      	ite	ne
 8001aec:	2201      	movne	r2, #1
 8001aee:	2200      	moveq	r2, #0
 8001af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d113      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d06e      	beq.n	8001bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	d069      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b30:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0ad      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b40:	4b4c      	ldr	r3, [pc, #304]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4c:	f7ff f928 	bl	8000da0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f924 	bl	8000da0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e09a      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b66:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b72:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <HAL_RCC_OscConfig+0x784>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b8c:	0212      	lsls	r2, r2, #8
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b94:	0852      	lsrs	r2, r2, #1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	0552      	lsls	r2, r2, #21
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	0652      	lsls	r2, r2, #25
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bac:	0912      	lsrs	r2, r2, #4
 8001bae:	0452      	lsls	r2, r2, #17
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	4930      	ldr	r1, [pc, #192]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd0:	f7ff f8e6 	bl	8000da0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f8e2 	bl	8000da0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e058      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf6:	e050      	b.n	8001c9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04f      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d148      	bne.n	8001c9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c20:	f7ff f8be 	bl	8000da0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f8ba 	bl	8000da0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e030      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x734>
 8001c46:	e028      	b.n	8001c9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d023      	beq.n	8001c96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_RCC_OscConfig+0x780>)
 8001c54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f8a1 	bl	8000da0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	e00c      	b.n	8001c7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f89d 	bl	8000da0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d905      	bls.n	8001c7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_OscConfig+0x7b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ec      	bne.n	8001c62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x7b0>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4905      	ldr	r1, [pc, #20]	@ (8001ca4 <HAL_RCC_OscConfig+0x7b0>)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_RCC_OscConfig+0x7b4>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e001      	b.n	8001c9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	feeefffc 	.word	0xfeeefffc

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0e7      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b75      	ldr	r3, [pc, #468]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d910      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b72      	ldr	r3, [pc, #456]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4970      	ldr	r1, [pc, #448]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b6e      	ldr	r3, [pc, #440]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0cf      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d908      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4960      	ldr	r1, [pc, #384]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d04c      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	4b5a      	ldr	r3, [pc, #360]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0a6      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4b54      	ldr	r3, [pc, #336]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e09a      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e08e      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d72:	4b4a      	ldr	r3, [pc, #296]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e086      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4943      	ldr	r1, [pc, #268]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7ff f804 	bl	8000da0 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f800 	bl	8000da0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e06e      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d208      	bcs.n	8001df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	492b      	ldr	r1, [pc, #172]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df2:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d210      	bcs.n	8001e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e036      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4918      	ldr	r1, [pc, #96]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4910      	ldr	r1, [pc, #64]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e60:	f000 f824 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	490b      	ldr	r1, [pc, #44]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff3b 	bl	8000d00 <HAL_InitTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	0800524c 	.word	0x0800524c
 8001ea4:	20000010 	.word	0x20000010
 8001ea8:	20000014 	.word	0x20000014

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d121      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d11e      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee0:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eec:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e005      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e004      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d134      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d003      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0xac>
 8001f50:	e005      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f54:	617b      	str	r3, [r7, #20]
      break;
 8001f56:	e005      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f5a:	617b      	str	r3, [r7, #20]
      break;
 8001f5c:	e002      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	3301      	adds	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	fb03 f202 	mul.w	r2, r3, r2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	0e5b      	lsrs	r3, r3, #25
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	3301      	adds	r3, #1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08005264 	.word	0x08005264
 8001fbc:	00f42400 	.word	0x00f42400
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000010 	.word	0x20000010

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe0:	f7ff fff0 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4904      	ldr	r1, [pc, #16]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	0800525c 	.word	0x0800525c

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800200c:	f7ff ffda 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4904      	ldr	r1, [pc, #16]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	0800525c 	.word	0x0800525c

08002034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002040:	4b2a      	ldr	r3, [pc, #168]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800204c:	f7ff f9ee 	bl	800142c <HAL_PWREx_GetVoltageRange>
 8002050:	6178      	str	r0, [r7, #20]
 8002052:	e014      	b.n	800207e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800206c:	f7ff f9de 	bl	800142c <HAL_PWREx_GetVoltageRange>
 8002070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d10b      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	@ 0x80
 800208a:	d919      	bls.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002090:	d902      	bls.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002092:	2302      	movs	r3, #2
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e013      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e010      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	@ 0x80
 80020a2:	d902      	bls.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020a4:	2303      	movs	r3, #3
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e00a      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	@ 0x80
 80020ae:	d102      	bne.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e004      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b70      	cmp	r3, #112	@ 0x70
 80020ba:	d101      	bne.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	4909      	ldr	r1, [pc, #36]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020fc:	2300      	movs	r3, #0
 80020fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002100:	2300      	movs	r3, #0
 8002102:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210c:	2b00      	cmp	r3, #0
 800210e:	d041      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002114:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002118:	d02a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800211a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800211e:	d824      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002120:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002124:	d008      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800212a:	d81e      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002134:	d010      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002136:	e018      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002138:	4b86      	ldr	r3, [pc, #536]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a85      	ldr	r2, [pc, #532]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002144:	e015      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fabb 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002156:	e00c      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3320      	adds	r3, #32
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fba6 	bl	80028b0 <RCCEx_PLLSAI2_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002168:	e003      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	74fb      	strb	r3, [r7, #19]
      break;
 800216e:	e000      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002178:	4b76      	ldr	r3, [pc, #472]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002186:	4973      	ldr	r1, [pc, #460]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800218e:	e001      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d041      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021a8:	d02a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021ae:	d824      	bhi.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021b4:	d008      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ba:	d81e      	bhi.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c4:	d010      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021c6:	e018      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021c8:	4b62      	ldr	r3, [pc, #392]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a61      	ldr	r2, [pc, #388]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021d4:	e015      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fa73 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 80021e2:	4603      	mov	r3, r0
 80021e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e6:	e00c      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3320      	adds	r3, #32
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fb5e 	bl	80028b0 <RCCEx_PLLSAI2_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f8:	e003      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	74fb      	strb	r3, [r7, #19]
      break;
 80021fe:	e000      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002208:	4b52      	ldr	r3, [pc, #328]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002216:	494f      	ldr	r1, [pc, #316]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800221e:	e001      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a0 	beq.w	8002372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002246:	2300      	movs	r3, #0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	4a40      	ldr	r2, [pc, #256]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	@ 0x58
 8002258:	4b3e      	ldr	r3, [pc, #248]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002268:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3a      	ldr	r2, [pc, #232]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002274:	f7fe fd94 	bl	8000da0 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800227a:	e009      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fd90 	bl	8000da0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d902      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	74fb      	strb	r3, [r7, #19]
        break;
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002290:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ef      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d15c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01f      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	4a20      	ldr	r2, [pc, #128]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fd4f 	bl	8000da0 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fd4b 	bl	8000da0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
            break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ec      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002342:	4904      	ldr	r1, [pc, #16]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800234a:	e009      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
 8002350:	e006      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002360:	7c7b      	ldrb	r3, [r7, #17]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b9e      	ldr	r3, [pc, #632]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a9d      	ldr	r2, [pc, #628]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237e:	4b98      	ldr	r3, [pc, #608]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	f023 0203 	bic.w	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	4994      	ldr	r1, [pc, #592]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a0:	4b8f      	ldr	r3, [pc, #572]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f023 020c 	bic.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	498c      	ldr	r1, [pc, #560]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c2:	4b87      	ldr	r3, [pc, #540]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	4983      	ldr	r1, [pc, #524]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e4:	4b7e      	ldr	r3, [pc, #504]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	497b      	ldr	r1, [pc, #492]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002406:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	4972      	ldr	r1, [pc, #456]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002428:	4b6d      	ldr	r3, [pc, #436]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	496a      	ldr	r1, [pc, #424]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800244a:	4b65      	ldr	r3, [pc, #404]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	4961      	ldr	r1, [pc, #388]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800246c:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	4959      	ldr	r1, [pc, #356]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800248e:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002494:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249c:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b0:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	4948      	ldr	r1, [pc, #288]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d2:	4b43      	ldr	r3, [pc, #268]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	493f      	ldr	r1, [pc, #252]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d028      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f4:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002502:	4937      	ldr	r1, [pc, #220]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002512:	d106      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a31      	ldr	r2, [pc, #196]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251e:	60d3      	str	r3, [r2, #12]
 8002520:	e011      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800252a:	d10c      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	2101      	movs	r1, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f8c8 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d028      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002558:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002560:	491f      	ldr	r1, [pc, #124]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002570:	d106      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002572:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800257c:	60d3      	str	r3, [r2, #12]
 800257e:	e011      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f899 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002596:	4603      	mov	r3, r0
 8002598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02b      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025be:	4908      	ldr	r1, [pc, #32]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025ce:	d109      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a02      	ldr	r2, [pc, #8]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025da:	60d3      	str	r3, [r2, #12]
 80025dc:	e014      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f867 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 80025fa:	4603      	mov	r3, r0
 80025fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02f      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002622:	4928      	ldr	r1, [pc, #160]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800262e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002632:	d10d      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f844 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	74bb      	strb	r3, [r7, #18]
 800264e:	e011      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3320      	adds	r3, #32
 800265e:	2102      	movs	r1, #2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f925 	bl	80028b0 <RCCEx_PLLSAI2_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002680:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800268e:	490d      	ldr	r1, [pc, #52]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b2:	4904      	ldr	r1, [pc, #16]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d6:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026e2:	4b72      	ldr	r3, [pc, #456]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0203 	and.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
       ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026fa:	4b6c      	ldr	r3, [pc, #432]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
       ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d047      	beq.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e044      	b.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d018      	beq.n	800274e <RCCEx_PLLSAI1_Config+0x86>
 800271c:	2b03      	cmp	r3, #3
 800271e:	d825      	bhi.n	800276c <RCCEx_PLLSAI1_Config+0xa4>
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <RCCEx_PLLSAI1_Config+0x62>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d009      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x74>
 8002728:	e020      	b.n	800276c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272a:	4b60      	ldr	r3, [pc, #384]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11d      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273a:	e01a      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800273c:	4b5b      	ldr	r3, [pc, #364]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e013      	b.n	8002776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800274e:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800275a:	4b54      	ldr	r3, [pc, #336]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800276a:	e006      	b.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      break;
 8002770:	e004      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002772:	bf00      	nop
 8002774:	e002      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002776:	bf00      	nop
 8002778:	e000      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277a:	bf00      	nop
    }

    if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	430b      	orrs	r3, r1
 8002798:	4944      	ldr	r1, [pc, #272]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d17d      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a40      	ldr	r2, [pc, #256]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7fe faf6 	bl	8000da0 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b6:	e009      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b8:	f7fe faf2 	bl	8000da0 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d902      	bls.n	80027cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ca:	e005      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027cc:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ef      	bne.n	80027b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d160      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e4:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	0211      	lsls	r1, r2, #8
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	0912      	lsrs	r2, r2, #4
 80027fc:	0452      	lsls	r2, r2, #17
 80027fe:	430a      	orrs	r2, r1
 8002800:	492a      	ldr	r1, [pc, #168]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	610b      	str	r3, [r1, #16]
 8002806:	e027      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d112      	bne.n	8002834 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800280e:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002816:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	0211      	lsls	r1, r2, #8
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6912      	ldr	r2, [r2, #16]
 8002824:	0852      	lsrs	r2, r2, #1
 8002826:	3a01      	subs	r2, #1
 8002828:	0552      	lsls	r2, r2, #21
 800282a:	430a      	orrs	r2, r1
 800282c:	491f      	ldr	r1, [pc, #124]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	610b      	str	r3, [r1, #16]
 8002832:	e011      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800283c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6952      	ldr	r2, [r2, #20]
 800284a:	0852      	lsrs	r2, r2, #1
 800284c:	3a01      	subs	r2, #1
 800284e:	0652      	lsls	r2, r2, #25
 8002850:	430a      	orrs	r2, r1
 8002852:	4916      	ldr	r1, [pc, #88]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002858:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fa9c 	bl	8000da0 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800286a:	e009      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800286c:	f7fe fa98 	bl	8000da0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d902      	bls.n	8002880 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	73fb      	strb	r3, [r7, #15]
          break;
 800287e:	e005      	b.n	800288c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002880:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	4904      	ldr	r1, [pc, #16]	@ (80028ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028be:	4b6a      	ldr	r3, [pc, #424]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d018      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ca:	4b67      	ldr	r3, [pc, #412]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d10d      	bne.n	80028f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
       ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028e2:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
       ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d047      	beq.n	8002986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e044      	b.n	8002986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d018      	beq.n	8002936 <RCCEx_PLLSAI2_Config+0x86>
 8002904:	2b03      	cmp	r3, #3
 8002906:	d825      	bhi.n	8002954 <RCCEx_PLLSAI2_Config+0xa4>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d002      	beq.n	8002912 <RCCEx_PLLSAI2_Config+0x62>
 800290c:	2b02      	cmp	r3, #2
 800290e:	d009      	beq.n	8002924 <RCCEx_PLLSAI2_Config+0x74>
 8002910:	e020      	b.n	8002954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002912:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11d      	bne.n	800295a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e01a      	b.n	800295a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002934:	e013      	b.n	800295e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002936:	4b4c      	ldr	r3, [pc, #304]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002942:	4b49      	ldr	r3, [pc, #292]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002952:	e006      	b.n	8002962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e004      	b.n	8002964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002962:	bf00      	nop
    }

    if(status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800296a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	430b      	orrs	r3, r1
 8002980:	4939      	ldr	r1, [pc, #228]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d167      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a35      	ldr	r2, [pc, #212]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fa02 	bl	8000da0 <HAL_GetTick>
 800299c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800299e:	e009      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029a0:	f7fe f9fe 	bl	8000da0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d902      	bls.n	80029b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	73fb      	strb	r3, [r7, #15]
        break;
 80029b2:	e005      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ef      	bne.n	80029a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d14a      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029cc:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6892      	ldr	r2, [r2, #8]
 80029dc:	0211      	lsls	r1, r2, #8
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	0912      	lsrs	r2, r2, #4
 80029e4:	0452      	lsls	r2, r2, #17
 80029e6:	430a      	orrs	r2, r1
 80029e8:	491f      	ldr	r1, [pc, #124]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	614b      	str	r3, [r1, #20]
 80029ee:	e011      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6912      	ldr	r2, [r2, #16]
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4916      	ldr	r1, [pc, #88]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe f9be 	bl	8000da0 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a26:	e009      	b.n	8002a3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a28:	f7fe f9ba 	bl	8000da0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3a:	e005      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4904      	ldr	r1, [pc, #16]	@ (8002a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e049      	b.n	8002b12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd ffd0 	bl	8000a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fa50 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_TIM_PWM_Start+0x24>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e03c      	b.n	8002bba <HAL_TIM_PWM_Start+0x9e>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d109      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x3e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	e02f      	b.n	8002bba <HAL_TIM_PWM_Start+0x9e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d109      	bne.n	8002b74 <HAL_TIM_PWM_Start+0x58>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e022      	b.n	8002bba <HAL_TIM_PWM_Start+0x9e>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d109      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x72>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e015      	b.n	8002bba <HAL_TIM_PWM_Start+0x9e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d109      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0x8c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e008      	b.n	8002bba <HAL_TIM_PWM_Start+0x9e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e09c      	b.n	8002cfc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0xb6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd0:	e023      	b.n	8002c1a <HAL_TIM_PWM_Start+0xfe>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xc6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be0:	e01b      	b.n	8002c1a <HAL_TIM_PWM_Start+0xfe>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xd6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bf0:	e013      	b.n	8002c1a <HAL_TIM_PWM_Start+0xfe>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xe6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c00:	e00b      	b.n	8002c1a <HAL_TIM_PWM_Start+0xfe>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xf6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c10:	e003      	b.n	8002c1a <HAL_TIM_PWM_Start+0xfe>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd04 	bl	8003630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <HAL_TIM_PWM_Start+0x1e8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x13e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a34      	ldr	r2, [pc, #208]	@ (8002d08 <HAL_TIM_PWM_Start+0x1ec>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x13e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a32      	ldr	r2, [pc, #200]	@ (8002d0c <HAL_TIM_PWM_Start+0x1f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x13e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a31      	ldr	r2, [pc, #196]	@ (8002d10 <HAL_TIM_PWM_Start+0x1f4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x13e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	@ (8002d14 <HAL_TIM_PWM_Start+0x1f8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x142>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_TIM_PWM_Start+0x144>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a22      	ldr	r2, [pc, #136]	@ (8002d04 <HAL_TIM_PWM_Start+0x1e8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01d      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c86:	d018      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <HAL_TIM_PWM_Start+0x1fc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a21      	ldr	r2, [pc, #132]	@ (8002d1c <HAL_TIM_PWM_Start+0x200>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <HAL_TIM_PWM_Start+0x204>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <HAL_TIM_PWM_Start+0x1ec>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIM_PWM_Start+0x19e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	@ (8002d0c <HAL_TIM_PWM_Start+0x1f0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d115      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_TIM_PWM_Start+0x208>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d015      	beq.n	8002cf8 <HAL_TIM_PWM_Start+0x1dc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd2:	d011      	beq.n	8002cf8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	e008      	b.n	8002cf8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e000      	b.n	8002cfa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	40000c00 	.word	0x40000c00
 8002d24:	00010007 	.word	0x00010007

08002d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0ff      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b14      	cmp	r3, #20
 8002d52:	f200 80f0 	bhi.w	8002f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d56:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002f37 	.word	0x08002f37
 8002d64:	08002f37 	.word	0x08002f37
 8002d68:	08002f37 	.word	0x08002f37
 8002d6c:	08002df1 	.word	0x08002df1
 8002d70:	08002f37 	.word	0x08002f37
 8002d74:	08002f37 	.word	0x08002f37
 8002d78:	08002f37 	.word	0x08002f37
 8002d7c:	08002e33 	.word	0x08002e33
 8002d80:	08002f37 	.word	0x08002f37
 8002d84:	08002f37 	.word	0x08002f37
 8002d88:	08002f37 	.word	0x08002f37
 8002d8c:	08002e73 	.word	0x08002e73
 8002d90:	08002f37 	.word	0x08002f37
 8002d94:	08002f37 	.word	0x08002f37
 8002d98:	08002f37 	.word	0x08002f37
 8002d9c:	08002eb5 	.word	0x08002eb5
 8002da0:	08002f37 	.word	0x08002f37
 8002da4:	08002f37 	.word	0x08002f37
 8002da8:	08002f37 	.word	0x08002f37
 8002dac:	08002ef5 	.word	0x08002ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f964 	bl	8003084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e0a5      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9d4 	bl	80031a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e084      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fa3d 	bl	80032b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e064      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 faa5 	bl	80033c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e043      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faee 	bl	800349c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ef2:	e023      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fb32 	bl	8003564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a40      	ldr	r2, [pc, #256]	@ (8003064 <TIM_Base_SetConfig+0x114>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6e:	d00f      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3d      	ldr	r2, [pc, #244]	@ (8003068 <TIM_Base_SetConfig+0x118>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	@ (800306c <TIM_Base_SetConfig+0x11c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	@ (8003070 <TIM_Base_SetConfig+0x120>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003074 <TIM_Base_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8003064 <TIM_Base_SetConfig+0x114>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb0:	d01b      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003068 <TIM_Base_SetConfig+0x118>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d017      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <TIM_Base_SetConfig+0x11c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <TIM_Base_SetConfig+0x120>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	@ (8003074 <TIM_Base_SetConfig+0x124>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <TIM_Base_SetConfig+0x128>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a27      	ldr	r2, [pc, #156]	@ (800307c <TIM_Base_SetConfig+0x12c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a26      	ldr	r2, [pc, #152]	@ (8003080 <TIM_Base_SetConfig+0x130>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a10      	ldr	r2, [pc, #64]	@ (8003064 <TIM_Base_SetConfig+0x114>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <TIM_Base_SetConfig+0x124>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <TIM_Base_SetConfig+0x128>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a10      	ldr	r2, [pc, #64]	@ (800307c <TIM_Base_SetConfig+0x12c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0f      	ldr	r2, [pc, #60]	@ (8003080 <TIM_Base_SetConfig+0x130>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	615a      	str	r2, [r3, #20]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40013400 	.word	0x40013400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 0201 	bic.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f023 0302 	bic.w	r3, r3, #2
 80030d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <TIM_OC1_SetConfig+0x10c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00f      	beq.n	8003104 <TIM_OC1_SetConfig+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <TIM_OC1_SetConfig+0x110>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00b      	beq.n	8003104 <TIM_OC1_SetConfig+0x80>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <TIM_OC1_SetConfig+0x114>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <TIM_OC1_SetConfig+0x80>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a29      	ldr	r2, [pc, #164]	@ (800319c <TIM_OC1_SetConfig+0x118>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_OC1_SetConfig+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a28      	ldr	r2, [pc, #160]	@ (80031a0 <TIM_OC1_SetConfig+0x11c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10c      	bne.n	800311e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0308 	bic.w	r3, r3, #8
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1b      	ldr	r2, [pc, #108]	@ (8003190 <TIM_OC1_SetConfig+0x10c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00f      	beq.n	8003146 <TIM_OC1_SetConfig+0xc2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <TIM_OC1_SetConfig+0x110>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_OC1_SetConfig+0xc2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <TIM_OC1_SetConfig+0x114>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_OC1_SetConfig+0xc2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a18      	ldr	r2, [pc, #96]	@ (800319c <TIM_OC1_SetConfig+0x118>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_OC1_SetConfig+0xc2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <TIM_OC1_SetConfig+0x11c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d111      	bne.n	800316a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800314c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800

080031a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 0210 	bic.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <TIM_OC2_SetConfig+0x100>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC2_SetConfig+0x6c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <TIM_OC2_SetConfig+0x104>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10d      	bne.n	800322c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800322a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <TIM_OC2_SetConfig+0x100>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00f      	beq.n	8003254 <TIM_OC2_SetConfig+0xb0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <TIM_OC2_SetConfig+0x104>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00b      	beq.n	8003254 <TIM_OC2_SetConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <TIM_OC2_SetConfig+0x108>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <TIM_OC2_SetConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1a      	ldr	r2, [pc, #104]	@ (80032b0 <TIM_OC2_SetConfig+0x10c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_OC2_SetConfig+0xb0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <TIM_OC2_SetConfig+0x110>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d113      	bne.n	800327c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800325a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40013400 	.word	0x40013400
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800

080032b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <TIM_OC3_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC3_SetConfig+0x6a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	@ (80033b8 <TIM_OC3_SetConfig+0x100>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10d      	bne.n	800333e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800333c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <TIM_OC3_SetConfig+0xfc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_OC3_SetConfig+0xae>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <TIM_OC3_SetConfig+0x100>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_OC3_SetConfig+0xae>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <TIM_OC3_SetConfig+0x104>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_OC3_SetConfig+0xae>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a19      	ldr	r2, [pc, #100]	@ (80033c0 <TIM_OC3_SetConfig+0x108>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC3_SetConfig+0xae>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <TIM_OC3_SetConfig+0x10c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d113      	bne.n	800338e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40013400 	.word	0x40013400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	031b      	lsls	r3, r3, #12
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a18      	ldr	r2, [pc, #96]	@ (8003488 <TIM_OC4_SetConfig+0xc0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00f      	beq.n	800344c <TIM_OC4_SetConfig+0x84>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a17      	ldr	r2, [pc, #92]	@ (800348c <TIM_OC4_SetConfig+0xc4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_OC4_SetConfig+0x84>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <TIM_OC4_SetConfig+0xc8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_OC4_SetConfig+0x84>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <TIM_OC4_SetConfig+0xcc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC4_SetConfig+0x84>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <TIM_OC4_SetConfig+0xd0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <TIM_OC5_SetConfig+0xb4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <TIM_OC5_SetConfig+0x7a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <TIM_OC5_SetConfig+0xb8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_OC5_SetConfig+0x7a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <TIM_OC5_SetConfig+0xbc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_OC5_SetConfig+0x7a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a14      	ldr	r2, [pc, #80]	@ (800355c <TIM_OC5_SetConfig+0xc0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_OC5_SetConfig+0x7a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <TIM_OC5_SetConfig+0xc4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d109      	bne.n	800352a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40013400 	.word	0x40013400
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	051b      	lsls	r3, r3, #20
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a18      	ldr	r2, [pc, #96]	@ (800361c <TIM_OC6_SetConfig+0xb8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00f      	beq.n	80035e0 <TIM_OC6_SetConfig+0x7c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <TIM_OC6_SetConfig+0xbc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_OC6_SetConfig+0x7c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <TIM_OC6_SetConfig+0xc0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_OC6_SetConfig+0x7c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <TIM_OC6_SetConfig+0xc4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_OC6_SetConfig+0x7c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a14      	ldr	r2, [pc, #80]	@ (800362c <TIM_OC6_SetConfig+0xc8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d109      	bne.n	80035f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40013400 	.word	0x40013400
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800

08003630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e068      	b.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80036ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01d      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003706:	d018      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10c      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4313      	orrs	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40013400 	.word	0x40013400
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40014000 	.word	0x40014000

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f9b4 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fe94 	bl	8004500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fbd9 	bl	8003f90 <UART_SetConfig>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e01b      	b.n	8003820 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 ff13 	bl	8004644 <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003828:	b480      	push	{r7}
 800382a:	b08b      	sub	sp, #44	@ 0x2c
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383a:	2b20      	cmp	r3, #32
 800383c:	d147      	bne.n	80038ce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_Transmit_IT+0x22>
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e040      	b.n	80038d0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2221      	movs	r2, #33	@ 0x21
 8003876:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003880:	d107      	bne.n	8003892 <HAL_UART_Transmit_IT+0x6a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <HAL_UART_Transmit_IT+0xb4>)
 800388e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003890:	e002      	b.n	8003898 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <HAL_UART_Transmit_IT+0xb8>)
 8003896:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	613b      	str	r3, [r7, #16]
   return(result);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	69f9      	ldr	r1, [r7, #28]
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e6      	bne.n	8003898 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	372c      	adds	r7, #44	@ 0x2c
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	08004b9b 	.word	0x08004b9b
 80038e0:	08004ae5 	.word	0x08004ae5

080038e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d137      	bne.n	800396c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_UART_Receive_IT+0x24>
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e030      	b.n	800396e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a18      	ldr	r2, [pc, #96]	@ (8003978 <HAL_UART_Receive_IT+0x94>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01f      	beq.n	800395c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	61bb      	str	r3, [r7, #24]
   return(result);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e6      	bne.n	800392a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	461a      	mov	r2, r3
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 ff7e 	bl	8004864 <UART_Start_Receive_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	e000      	b.n	800396e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40008000 	.word	0x40008000

0800397c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b0ba      	sub	sp, #232	@ 0xe8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80039a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80039aa:	4013      	ands	r3, r2
 80039ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80039b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00f      	beq.n	80039e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 82ae 	beq.w	8003f36 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
      }
      return;
 80039e2:	e2a8      	b.n	8003f36 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80039e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8117 	beq.w	8003c1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80039fe:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <HAL_UART_IRQHandler+0x298>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 810a 	beq.w	8003c1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d011      	beq.n	8003a38 <HAL_UART_IRQHandler+0xbc>
 8003a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d011      	beq.n	8003a68 <HAL_UART_IRQHandler+0xec>
 8003a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d011      	beq.n	8003a98 <HAL_UART_IRQHandler+0x11c>
 8003a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2204      	movs	r2, #4
 8003a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aca:	f043 0208 	orr.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_UART_IRQHandler+0x18a>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8214 	beq.w	8003f3a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04f      	beq.n	8003bfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 ff46 	bl	80049f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d141      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1d9      	bne.n	8003b72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d013      	beq.n	8003bee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bca:	4a13      	ldr	r2, [pc, #76]	@ (8003c18 <HAL_UART_IRQHandler+0x29c>)
 8003bcc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fa3f 	bl	8001056 <HAL_DMA_Abort_IT>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003be8:	4610      	mov	r0, r2
 8003bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00f      	b.n	8003c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9b8 	bl	8003f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00b      	b.n	8003c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9b4 	bl	8003f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e007      	b.n	8003c0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9b0 	bl	8003f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003c0c:	e195      	b.n	8003f3a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0e:	bf00      	nop
    return;
 8003c10:	e193      	b.n	8003f3a <HAL_UART_IRQHandler+0x5be>
 8003c12:	bf00      	nop
 8003c14:	04000120 	.word	0x04000120
 8003c18:	08004ab9 	.word	0x08004ab9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 814e 	bne.w	8003ec2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8147 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8140 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2210      	movs	r2, #16
 8003c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	f040 80b8 	bne.w	8003dca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8167 	beq.w	8003f3e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	f080 815f 	bcs.w	8003f3e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 8086 	bne.w	8003da8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1da      	bne.n	8003c9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e1      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e3      	bne.n	8003d22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d78:	f023 0310 	bic.w	r3, r3, #16
 8003d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e4      	bne.n	8003d68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f919 	bl	8000fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8d8 	bl	8003f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dc8:	e0b9      	b.n	8003f3e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80ab 	beq.w	8003f42 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a6 	beq.w	8003f42 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e4      	bne.n	8003df6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e50:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e3      	bne.n	8003e2c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0310 	bic.w	r3, r3, #16
 8003e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e4      	bne.n	8003e78 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f85c 	bl	8003f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec0:	e03f      	b.n	8003f42 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00e      	beq.n	8003eec <HAL_UART_IRQHandler+0x570>
 8003ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f001 f89f 	bl	8005028 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eea:	e02d      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01c      	beq.n	8003f46 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
    }
    return;
 8003f14:	e017      	b.n	8003f46 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d012      	beq.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00c      	beq.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fe93 	bl	8004c5a <UART_EndTransmit_IT>
    return;
 8003f34:	e008      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f36:	bf00      	nop
 8003f38:	e006      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f48:	37e8      	adds	r7, #232	@ 0xe8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b08a      	sub	sp, #40	@ 0x28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4ba4      	ldr	r3, [pc, #656]	@ (8004250 <UART_SetConfig+0x2c0>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a99      	ldr	r2, [pc, #612]	@ (8004254 <UART_SetConfig+0x2c4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a90      	ldr	r2, [pc, #576]	@ (8004258 <UART_SetConfig+0x2c8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d126      	bne.n	8004068 <UART_SetConfig+0xd8>
 800401a:	4b90      	ldr	r3, [pc, #576]	@ (800425c <UART_SetConfig+0x2cc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d81b      	bhi.n	8004060 <UART_SetConfig+0xd0>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <UART_SetConfig+0xa0>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004051 	.word	0x08004051
 8004038:	08004049 	.word	0x08004049
 800403c:	08004059 	.word	0x08004059
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004046:	e116      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004048:	2302      	movs	r3, #2
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e112      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004050:	2304      	movs	r3, #4
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e10e      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004058:	2308      	movs	r3, #8
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e10a      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004060:	2310      	movs	r3, #16
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e106      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a7c      	ldr	r2, [pc, #496]	@ (8004260 <UART_SetConfig+0x2d0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d138      	bne.n	80040e4 <UART_SetConfig+0x154>
 8004072:	4b7a      	ldr	r3, [pc, #488]	@ (800425c <UART_SetConfig+0x2cc>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b0c      	cmp	r3, #12
 800407e:	d82d      	bhi.n	80040dc <UART_SetConfig+0x14c>
 8004080:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <UART_SetConfig+0xf8>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040dd 	.word	0x080040dd
 8004090:	080040dd 	.word	0x080040dd
 8004094:	080040dd 	.word	0x080040dd
 8004098:	080040cd 	.word	0x080040cd
 800409c:	080040dd 	.word	0x080040dd
 80040a0:	080040dd 	.word	0x080040dd
 80040a4:	080040dd 	.word	0x080040dd
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	080040dd 	.word	0x080040dd
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040d5 	.word	0x080040d5
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c2:	e0d8      	b.n	8004276 <UART_SetConfig+0x2e6>
 80040c4:	2302      	movs	r3, #2
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ca:	e0d4      	b.n	8004276 <UART_SetConfig+0x2e6>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e0d0      	b.n	8004276 <UART_SetConfig+0x2e6>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e0cc      	b.n	8004276 <UART_SetConfig+0x2e6>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e0c8      	b.n	8004276 <UART_SetConfig+0x2e6>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004264 <UART_SetConfig+0x2d4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d125      	bne.n	800413a <UART_SetConfig+0x1aa>
 80040ee:	4b5b      	ldr	r3, [pc, #364]	@ (800425c <UART_SetConfig+0x2cc>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040f8:	2b30      	cmp	r3, #48	@ 0x30
 80040fa:	d016      	beq.n	800412a <UART_SetConfig+0x19a>
 80040fc:	2b30      	cmp	r3, #48	@ 0x30
 80040fe:	d818      	bhi.n	8004132 <UART_SetConfig+0x1a2>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d00a      	beq.n	800411a <UART_SetConfig+0x18a>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d814      	bhi.n	8004132 <UART_SetConfig+0x1a2>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <UART_SetConfig+0x182>
 800410c:	2b10      	cmp	r3, #16
 800410e:	d008      	beq.n	8004122 <UART_SetConfig+0x192>
 8004110:	e00f      	b.n	8004132 <UART_SetConfig+0x1a2>
 8004112:	2300      	movs	r3, #0
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004118:	e0ad      	b.n	8004276 <UART_SetConfig+0x2e6>
 800411a:	2302      	movs	r3, #2
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004120:	e0a9      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004122:	2304      	movs	r3, #4
 8004124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004128:	e0a5      	b.n	8004276 <UART_SetConfig+0x2e6>
 800412a:	2308      	movs	r3, #8
 800412c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004130:	e0a1      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004132:	2310      	movs	r3, #16
 8004134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004138:	e09d      	b.n	8004276 <UART_SetConfig+0x2e6>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4a      	ldr	r2, [pc, #296]	@ (8004268 <UART_SetConfig+0x2d8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d125      	bne.n	8004190 <UART_SetConfig+0x200>
 8004144:	4b45      	ldr	r3, [pc, #276]	@ (800425c <UART_SetConfig+0x2cc>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800414e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004150:	d016      	beq.n	8004180 <UART_SetConfig+0x1f0>
 8004152:	2bc0      	cmp	r3, #192	@ 0xc0
 8004154:	d818      	bhi.n	8004188 <UART_SetConfig+0x1f8>
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d00a      	beq.n	8004170 <UART_SetConfig+0x1e0>
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d814      	bhi.n	8004188 <UART_SetConfig+0x1f8>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <UART_SetConfig+0x1d8>
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d008      	beq.n	8004178 <UART_SetConfig+0x1e8>
 8004166:	e00f      	b.n	8004188 <UART_SetConfig+0x1f8>
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416e:	e082      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004170:	2302      	movs	r3, #2
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e07e      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004178:	2304      	movs	r3, #4
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e07a      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004180:	2308      	movs	r3, #8
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e076      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004188:	2310      	movs	r3, #16
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418e:	e072      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a35      	ldr	r2, [pc, #212]	@ (800426c <UART_SetConfig+0x2dc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d12a      	bne.n	80041f0 <UART_SetConfig+0x260>
 800419a:	4b30      	ldr	r3, [pc, #192]	@ (800425c <UART_SetConfig+0x2cc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a8:	d01a      	beq.n	80041e0 <UART_SetConfig+0x250>
 80041aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ae:	d81b      	bhi.n	80041e8 <UART_SetConfig+0x258>
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b4:	d00c      	beq.n	80041d0 <UART_SetConfig+0x240>
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ba:	d815      	bhi.n	80041e8 <UART_SetConfig+0x258>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <UART_SetConfig+0x238>
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c4:	d008      	beq.n	80041d8 <UART_SetConfig+0x248>
 80041c6:	e00f      	b.n	80041e8 <UART_SetConfig+0x258>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e052      	b.n	8004276 <UART_SetConfig+0x2e6>
 80041d0:	2302      	movs	r3, #2
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e04e      	b.n	8004276 <UART_SetConfig+0x2e6>
 80041d8:	2304      	movs	r3, #4
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e04a      	b.n	8004276 <UART_SetConfig+0x2e6>
 80041e0:	2308      	movs	r3, #8
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e046      	b.n	8004276 <UART_SetConfig+0x2e6>
 80041e8:	2310      	movs	r3, #16
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e042      	b.n	8004276 <UART_SetConfig+0x2e6>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <UART_SetConfig+0x2c4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d13a      	bne.n	8004270 <UART_SetConfig+0x2e0>
 80041fa:	4b18      	ldr	r3, [pc, #96]	@ (800425c <UART_SetConfig+0x2cc>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004208:	d01a      	beq.n	8004240 <UART_SetConfig+0x2b0>
 800420a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800420e:	d81b      	bhi.n	8004248 <UART_SetConfig+0x2b8>
 8004210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004214:	d00c      	beq.n	8004230 <UART_SetConfig+0x2a0>
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421a:	d815      	bhi.n	8004248 <UART_SetConfig+0x2b8>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <UART_SetConfig+0x298>
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004224:	d008      	beq.n	8004238 <UART_SetConfig+0x2a8>
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x2b8>
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e022      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e01e      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e01a      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004246:	e016      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e012      	b.n	8004276 <UART_SetConfig+0x2e6>
 8004250:	efff69f3 	.word	0xefff69f3
 8004254:	40008000 	.word	0x40008000
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	40004c00 	.word	0x40004c00
 800426c:	40005000 	.word	0x40005000
 8004270:	2310      	movs	r3, #16
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a9f      	ldr	r2, [pc, #636]	@ (80044f8 <UART_SetConfig+0x568>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d17a      	bne.n	8004376 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004284:	2b08      	cmp	r3, #8
 8004286:	d824      	bhi.n	80042d2 <UART_SetConfig+0x342>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <UART_SetConfig+0x300>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042d3 	.word	0x080042d3
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042d3 	.word	0x080042d3
 80042a0:	080042c3 	.word	0x080042c3
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042d3 	.word	0x080042d3
 80042b0:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7fd fe92 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
        break;
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b8f      	ldr	r3, [pc, #572]	@ (80044fc <UART_SetConfig+0x56c>)
 80042be:	61fb      	str	r3, [r7, #28]
        break;
 80042c0:	e00d      	b.n	80042de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fd fdf3 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 80042c6:	61f8      	str	r0, [r7, #28]
        break;
 80042c8:	e009      	b.n	80042de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	61fb      	str	r3, [r7, #28]
        break;
 80042d0:	e005      	b.n	80042de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80fb 	beq.w	80044dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d305      	bcc.n	8004302 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d903      	bls.n	800430a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004308:	e0e8      	b.n	80044dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2200      	movs	r2, #0
 800430e:	461c      	mov	r4, r3
 8004310:	4615      	mov	r5, r2
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	022b      	lsls	r3, r5, #8
 800431c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004320:	0222      	lsls	r2, r4, #8
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6849      	ldr	r1, [r1, #4]
 8004326:	0849      	lsrs	r1, r1, #1
 8004328:	2000      	movs	r0, #0
 800432a:	4688      	mov	r8, r1
 800432c:	4681      	mov	r9, r0
 800432e:	eb12 0a08 	adds.w	sl, r2, r8
 8004332:	eb43 0b09 	adc.w	fp, r3, r9
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004344:	4650      	mov	r0, sl
 8004346:	4659      	mov	r1, fp
 8004348:	f7fb ff46 	bl	80001d8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800435a:	d308      	bcc.n	800436e <UART_SetConfig+0x3de>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d204      	bcs.n	800436e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e0b6      	b.n	80044dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004374:	e0b2      	b.n	80044dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437e:	d15e      	bne.n	800443e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004384:	2b08      	cmp	r3, #8
 8004386:	d828      	bhi.n	80043da <UART_SetConfig+0x44a>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0x400>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043db 	.word	0x080043db
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fd fe12 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80043b8:	61f8      	str	r0, [r7, #28]
        break;
 80043ba:	e014      	b.n	80043e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fd fe24 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b4d      	ldr	r3, [pc, #308]	@ (80044fc <UART_SetConfig+0x56c>)
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fd fd6f 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 80043ce:	61f8      	str	r0, [r7, #28]
        break;
 80043d0:	e009      	b.n	80043e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d077      	beq.n	80044dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005a      	lsls	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d916      	bls.n	8004436 <UART_SetConfig+0x4a6>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440e:	d212      	bcs.n	8004436 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f023 030f 	bic.w	r3, r3, #15
 8004418:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	b29a      	uxth	r2, r3
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	4313      	orrs	r3, r2
 800442a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	8afa      	ldrh	r2, [r7, #22]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e052      	b.n	80044dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800443c:	e04e      	b.n	80044dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800443e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004442:	2b08      	cmp	r3, #8
 8004444:	d827      	bhi.n	8004496 <UART_SetConfig+0x506>
 8004446:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <UART_SetConfig+0x4bc>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	08004497 	.word	0x08004497
 800445c:	08004487 	.word	0x08004487
 8004460:	08004497 	.word	0x08004497
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
 800446c:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fd fdb4 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e014      	b.n	80044a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fd fdc6 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b1e      	ldr	r3, [pc, #120]	@ (80044fc <UART_SetConfig+0x56c>)
 8004482:	61fb      	str	r3, [r7, #28]
        break;
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fd fd11 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 800448a:	61f8      	str	r0, [r7, #28]
        break;
 800448c:	e009      	b.n	80044a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e005      	b.n	80044a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044a0:	bf00      	nop
    }

    if (pclk != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d019      	beq.n	80044dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085a      	lsrs	r2, r3, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d909      	bls.n	80044d6 <UART_SetConfig+0x546>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c8:	d205      	bcs.n	80044d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	e002      	b.n	80044dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	@ 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	40008000 	.word	0x40008000
 80044fc:	00f42400 	.word	0x00f42400

08004500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01a      	beq.n	8004616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fe:	d10a      	bne.n	8004616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b098      	sub	sp, #96	@ 0x60
 8004648:	af02      	add	r7, sp, #8
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004654:	f7fc fba4 	bl	8000da0 <HAL_GetTick>
 8004658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d12e      	bne.n	80046c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	2200      	movs	r2, #0
 8004672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f88c 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d021      	beq.n	80046c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004696:	653b      	str	r3, [r7, #80]	@ 0x50
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e6      	bne.n	8004682 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e062      	b.n	800478c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d149      	bne.n	8004768 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046dc:	2200      	movs	r2, #0
 80046de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f856 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d03c      	beq.n	8004768 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	623b      	str	r3, [r7, #32]
   return(result);
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800470c:	633b      	str	r3, [r7, #48]	@ 0x30
 800470e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e6      	bne.n	80046ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3308      	adds	r3, #8
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	617b      	str	r3, [r7, #20]
   return(result);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e011      	b.n	800478c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3758      	adds	r7, #88	@ 0x58
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a4:	e049      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d045      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fc faf7 	bl	8000da0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e048      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d031      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d110      	bne.n	8004806 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2208      	movs	r2, #8
 80047ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f8ff 	bl	80049f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2208      	movs	r2, #8
 80047f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e029      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004814:	d111      	bne.n	800483a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800481e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f8e5 	bl	80049f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e00f      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	429a      	cmp	r2, r3
 8004856:	d0a6      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b480      	push	{r7}
 8004866:	b097      	sub	sp, #92	@ 0x5c
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	d10e      	bne.n	80048b6 <UART_Start_Receive_IT+0x52>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <UART_Start_Receive_IT+0x48>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80048a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048aa:	e02d      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	22ff      	movs	r2, #255	@ 0xff
 80048b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048b4:	e028      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <UART_Start_Receive_IT+0x76>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <UART_Start_Receive_IT+0x6c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048ce:	e01b      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	227f      	movs	r2, #127	@ 0x7f
 80048d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048d8:	e016      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e2:	d10d      	bne.n	8004900 <UART_Start_Receive_IT+0x9c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <UART_Start_Receive_IT+0x92>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	227f      	movs	r2, #127	@ 0x7f
 80048f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048f4:	e008      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	223f      	movs	r2, #63	@ 0x3f
 80048fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048fe:	e003      	b.n	8004908 <UART_Start_Receive_IT+0xa4>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2222      	movs	r2, #34	@ 0x22
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004938:	64ba      	str	r2, [r7, #72]	@ 0x48
 800493a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800493e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004954:	d107      	bne.n	8004966 <UART_Start_Receive_IT+0x102>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a21      	ldr	r2, [pc, #132]	@ (80049e8 <UART_Start_Receive_IT+0x184>)
 8004962:	669a      	str	r2, [r3, #104]	@ 0x68
 8004964:	e002      	b.n	800496c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a20      	ldr	r2, [pc, #128]	@ (80049ec <UART_Start_Receive_IT+0x188>)
 800496a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34
 8004994:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e6      	bne.n	8004974 <UART_Start_Receive_IT+0x110>
 80049a6:	e018      	b.n	80049da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	613b      	str	r3, [r7, #16]
   return(result);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f043 0320 	orr.w	r3, r3, #32
 80049bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e6      	bne.n	80049a8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	375c      	adds	r7, #92	@ 0x5c
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	08004e6d 	.word	0x08004e6d
 80049ec:	08004cb1 	.word	0x08004cb1

080049f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b095      	sub	sp, #84	@ 0x54
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e6      	bne.n	80049f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e5      	bne.n	8004a2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d118      	bne.n	8004a98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f023 0310 	bic.w	r3, r3, #16
 8004a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	613b      	str	r3, [r7, #16]
   return(result);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e6      	bne.n	8004a66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004aac:	bf00      	nop
 8004aae:	3754      	adds	r7, #84	@ 0x54
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff fa44 	bl	8003f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b08f      	sub	sp, #60	@ 0x3c
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af0:	2b21      	cmp	r3, #33	@ 0x21
 8004af2:	d14c      	bne.n	8004b8e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d132      	bne.n	8004b66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b20:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e6      	bne.n	8004b32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b64:	e013      	b.n	8004b8e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004b8e:	bf00      	nop
 8004b90:	373c      	adds	r7, #60	@ 0x3c
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b091      	sub	sp, #68	@ 0x44
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	2b21      	cmp	r3, #33	@ 0x21
 8004ba8:	d151      	bne.n	8004c4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d132      	bne.n	8004c1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	617b      	str	r3, [r7, #20]
   return(result);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c1a:	e018      	b.n	8004c4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004c4e:	bf00      	nop
 8004c50:	3744      	adds	r7, #68	@ 0x44
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b088      	sub	sp, #32
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff f955 	bl	8003f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca6:	bf00      	nop
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b09c      	sub	sp, #112	@ 0x70
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004cbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc8:	2b22      	cmp	r3, #34	@ 0x22
 8004cca:	f040 80be 	bne.w	8004e4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cdc:	b2d9      	uxtb	r1, r3
 8004cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	400a      	ands	r2, r1
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80a3 	bne.w	8004e5e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e6      	bne.n	8004d18 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e5      	bne.n	8004d4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a34      	ldr	r2, [pc, #208]	@ (8004e68 <UART_RxISR_8BIT+0x1b8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d01f      	beq.n	8004ddc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	623b      	str	r3, [r7, #32]
   return(result);
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e6      	bne.n	8004daa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d12e      	bne.n	8004e42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	617b      	str	r3, [r7, #20]
   return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d103      	bne.n	8004e32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2210      	movs	r2, #16
 8004e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff f89c 	bl	8003f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e40:	e00d      	b.n	8004e5e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb fd48 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8004e48:	e009      	b.n	8004e5e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	8b1b      	ldrh	r3, [r3, #24]
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	831a      	strh	r2, [r3, #24]
}
 8004e5e:	bf00      	nop
 8004e60:	3770      	adds	r7, #112	@ 0x70
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40008000 	.word	0x40008000

08004e6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b09c      	sub	sp, #112	@ 0x70
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e84:	2b22      	cmp	r3, #34	@ 0x22
 8004e86:	f040 80be 	bne.w	8005006 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004e9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 80a3 	bne.w	800501a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ef4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ef8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f26:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a34      	ldr	r2, [pc, #208]	@ (8005024 <UART_RxISR_16BIT+0x1b8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01f      	beq.n	8004f98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d12e      	bne.n	8004ffe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d103      	bne.n	8004fee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2210      	movs	r2, #16
 8004fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fe ffbe 	bl	8003f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ffc:	e00d      	b.n	800501a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fb fc6a 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8005004:	e009      	b.n	800501a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	8b1b      	ldrh	r3, [r3, #24]
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	b292      	uxth	r2, r2
 8005018:	831a      	strh	r2, [r3, #24]
}
 800501a:	bf00      	nop
 800501c:	3770      	adds	r7, #112	@ 0x70
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40008000 	.word	0x40008000

08005028 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_strtol_l.constprop.0>:
 800503c:	2b24      	cmp	r3, #36	@ 0x24
 800503e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005042:	4686      	mov	lr, r0
 8005044:	4690      	mov	r8, r2
 8005046:	d801      	bhi.n	800504c <_strtol_l.constprop.0+0x10>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d106      	bne.n	800505a <_strtol_l.constprop.0+0x1e>
 800504c:	f000 f882 	bl	8005154 <__errno>
 8005050:	2316      	movs	r3, #22
 8005052:	6003      	str	r3, [r0, #0]
 8005054:	2000      	movs	r0, #0
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	4834      	ldr	r0, [pc, #208]	@ (800512c <_strtol_l.constprop.0+0xf0>)
 800505c:	460d      	mov	r5, r1
 800505e:	462a      	mov	r2, r5
 8005060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005064:	5d06      	ldrb	r6, [r0, r4]
 8005066:	f016 0608 	ands.w	r6, r6, #8
 800506a:	d1f8      	bne.n	800505e <_strtol_l.constprop.0+0x22>
 800506c:	2c2d      	cmp	r4, #45	@ 0x2d
 800506e:	d12d      	bne.n	80050cc <_strtol_l.constprop.0+0x90>
 8005070:	782c      	ldrb	r4, [r5, #0]
 8005072:	2601      	movs	r6, #1
 8005074:	1c95      	adds	r5, r2, #2
 8005076:	f033 0210 	bics.w	r2, r3, #16
 800507a:	d109      	bne.n	8005090 <_strtol_l.constprop.0+0x54>
 800507c:	2c30      	cmp	r4, #48	@ 0x30
 800507e:	d12a      	bne.n	80050d6 <_strtol_l.constprop.0+0x9a>
 8005080:	782a      	ldrb	r2, [r5, #0]
 8005082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005086:	2a58      	cmp	r2, #88	@ 0x58
 8005088:	d125      	bne.n	80050d6 <_strtol_l.constprop.0+0x9a>
 800508a:	786c      	ldrb	r4, [r5, #1]
 800508c:	2310      	movs	r3, #16
 800508e:	3502      	adds	r5, #2
 8005090:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005094:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005098:	2200      	movs	r2, #0
 800509a:	fbbc f9f3 	udiv	r9, ip, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80050a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80050a8:	2f09      	cmp	r7, #9
 80050aa:	d81b      	bhi.n	80050e4 <_strtol_l.constprop.0+0xa8>
 80050ac:	463c      	mov	r4, r7
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	dd27      	ble.n	8005102 <_strtol_l.constprop.0+0xc6>
 80050b2:	1c57      	adds	r7, r2, #1
 80050b4:	d007      	beq.n	80050c6 <_strtol_l.constprop.0+0x8a>
 80050b6:	4581      	cmp	r9, r0
 80050b8:	d320      	bcc.n	80050fc <_strtol_l.constprop.0+0xc0>
 80050ba:	d101      	bne.n	80050c0 <_strtol_l.constprop.0+0x84>
 80050bc:	45a2      	cmp	sl, r4
 80050be:	db1d      	blt.n	80050fc <_strtol_l.constprop.0+0xc0>
 80050c0:	fb00 4003 	mla	r0, r0, r3, r4
 80050c4:	2201      	movs	r2, #1
 80050c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050ca:	e7eb      	b.n	80050a4 <_strtol_l.constprop.0+0x68>
 80050cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80050ce:	bf04      	itt	eq
 80050d0:	782c      	ldrbeq	r4, [r5, #0]
 80050d2:	1c95      	addeq	r5, r2, #2
 80050d4:	e7cf      	b.n	8005076 <_strtol_l.constprop.0+0x3a>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1da      	bne.n	8005090 <_strtol_l.constprop.0+0x54>
 80050da:	2c30      	cmp	r4, #48	@ 0x30
 80050dc:	bf0c      	ite	eq
 80050de:	2308      	moveq	r3, #8
 80050e0:	230a      	movne	r3, #10
 80050e2:	e7d5      	b.n	8005090 <_strtol_l.constprop.0+0x54>
 80050e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80050e8:	2f19      	cmp	r7, #25
 80050ea:	d801      	bhi.n	80050f0 <_strtol_l.constprop.0+0xb4>
 80050ec:	3c37      	subs	r4, #55	@ 0x37
 80050ee:	e7de      	b.n	80050ae <_strtol_l.constprop.0+0x72>
 80050f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80050f4:	2f19      	cmp	r7, #25
 80050f6:	d804      	bhi.n	8005102 <_strtol_l.constprop.0+0xc6>
 80050f8:	3c57      	subs	r4, #87	@ 0x57
 80050fa:	e7d8      	b.n	80050ae <_strtol_l.constprop.0+0x72>
 80050fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005100:	e7e1      	b.n	80050c6 <_strtol_l.constprop.0+0x8a>
 8005102:	1c53      	adds	r3, r2, #1
 8005104:	d108      	bne.n	8005118 <_strtol_l.constprop.0+0xdc>
 8005106:	2322      	movs	r3, #34	@ 0x22
 8005108:	f8ce 3000 	str.w	r3, [lr]
 800510c:	4660      	mov	r0, ip
 800510e:	f1b8 0f00 	cmp.w	r8, #0
 8005112:	d0a0      	beq.n	8005056 <_strtol_l.constprop.0+0x1a>
 8005114:	1e69      	subs	r1, r5, #1
 8005116:	e006      	b.n	8005126 <_strtol_l.constprop.0+0xea>
 8005118:	b106      	cbz	r6, 800511c <_strtol_l.constprop.0+0xe0>
 800511a:	4240      	negs	r0, r0
 800511c:	f1b8 0f00 	cmp.w	r8, #0
 8005120:	d099      	beq.n	8005056 <_strtol_l.constprop.0+0x1a>
 8005122:	2a00      	cmp	r2, #0
 8005124:	d1f6      	bne.n	8005114 <_strtol_l.constprop.0+0xd8>
 8005126:	f8c8 1000 	str.w	r1, [r8]
 800512a:	e794      	b.n	8005056 <_strtol_l.constprop.0+0x1a>
 800512c:	08005295 	.word	0x08005295

08005130 <strtol>:
 8005130:	4613      	mov	r3, r2
 8005132:	460a      	mov	r2, r1
 8005134:	4601      	mov	r1, r0
 8005136:	4802      	ldr	r0, [pc, #8]	@ (8005140 <strtol+0x10>)
 8005138:	6800      	ldr	r0, [r0, #0]
 800513a:	f7ff bf7f 	b.w	800503c <_strtol_l.constprop.0>
 800513e:	bf00      	nop
 8005140:	2000001c 	.word	0x2000001c

08005144 <memset>:
 8005144:	4402      	add	r2, r0
 8005146:	4603      	mov	r3, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	@ (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	2000001c 	.word	0x2000001c

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4d0d      	ldr	r5, [pc, #52]	@ (8005198 <__libc_init_array+0x38>)
 8005164:	4c0d      	ldr	r4, [pc, #52]	@ (800519c <__libc_init_array+0x3c>)
 8005166:	1b64      	subs	r4, r4, r5
 8005168:	10a4      	asrs	r4, r4, #2
 800516a:	2600      	movs	r6, #0
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	4d0b      	ldr	r5, [pc, #44]	@ (80051a0 <__libc_init_array+0x40>)
 8005172:	4c0c      	ldr	r4, [pc, #48]	@ (80051a4 <__libc_init_array+0x44>)
 8005174:	f000 f818 	bl	80051a8 <_init>
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	2600      	movs	r6, #0
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f855 3b04 	ldr.w	r3, [r5], #4
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	080053a0 	.word	0x080053a0
 800519c:	080053a0 	.word	0x080053a0
 80051a0:	080053a0 	.word	0x080053a0
 80051a4:	080053a4 	.word	0x080053a4

080051a8 <_init>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr

080051b4 <_fini>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr
